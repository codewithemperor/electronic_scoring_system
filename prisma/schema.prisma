// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  role          Role     @default(STAFF)
  isActive      Boolean  @default(true)
  lastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  createdScreenings    Screening[] @relation("CreatedBy")
  scoredTests         TestScore[] @relation("ScoredBy")
  auditLogs           AuditLog[]
  passwordResets      PasswordReset[]
  
  @@map("users")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [email], references: [email])
  
  @@map("password_resets")
}

// Academic Sessions and Programs
model AcademicSession {
  id          String   @id @default(cuid())
  name        String   // e.g., "2024/2025"
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  screenings  Screening[]
  
  @@map("academic_sessions")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique // e.g., "CST", "EEE"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  programs    Program[]
  
  @@map("departments")
}

model Program {
  id           String   @id @default(cuid())
  name         String   // e.g., "Computer Science Technology"
  code         String   @unique // e.g., "CST"
  level        Level    @default(ND)
  departmentId String
  cutOffMark   Int      @default(40)
  maxCapacity  Int      @default(50)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  department   Department @relation(fields: [departmentId], references: [id])
  candidates   Candidate[]
  programTests  ProgramTest[]
  
  @@map("programs")
}

// Screening Management
model Screening {
  id               String   @id @default(cuid())
  name             String   // e.g., "ND Admission Screening 2024/2025"
  academicSessionId String
  startDate        DateTime
  endDate          DateTime
  duration         Int      // in minutes
  totalMarks       Int      @default(100)
  passMarks        Int      @default(40)
  status           ScreeningStatus @default(DRAFT)
  instructions     String?
  createdById      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  academicSession  AcademicSession @relation(fields: [academicSessionId], references: [id])
  createdBy        User            @relation("CreatedBy", fields: [createdById], references: [id])
  candidates       Candidate[]
  questions        Question[]
  programTests     ProgramTest[]
  
  @@map("screenings")
}

// Candidate Management
model Candidate {
  id              String   @id @default(cuid())
  screeningId     String
  programId       String
  
  // Personal Information
  firstName       String
  lastName        String
  middleName      String?
  email           String
  phone           String
  password        String  
  dateOfBirth     DateTime
  gender          Gender
  stateOfOrigin   String
  lga             String
  
  // Academic Information
  schoolName      String
  graduationYear  Int
  
  // O'Level Results (JSON structure)
  olevelResults   Json     // Array of subjects with grades
  
  // Screening Information
  registrationNumber String @unique
  hasWritten         Boolean @default(false)
  totalScore         Float?
  percentage         Float?
  status             CandidateStatus @default(REGISTERED)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  screening       Screening     @relation(fields: [screeningId], references: [id])
  program         Program       @relation(fields: [programId], references: [id])
  testScores      TestScore[]
  
  @@map("candidates")
}

// Question Bank
model Subject {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Mathematics", "English", "Physics"
  code        String   @unique // e.g., "MTH", "ENG", "PHY"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  questions   Question[]
  
  @@map("subjects")
}

model Question {
  id          String   @id @default(cuid())
  screeningId String?
  subjectId   String
  question    String
  options     Json     // Array of options: ["A) Option 1", "B) Option 2", ...]
  correctAnswer String // "A", "B", "C", or "D"
  marks       Int      @default(1)
  difficulty  Difficulty @default(MEDIUM)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  screening   Screening? @relation(fields: [screeningId], references: [id])
  subject     Subject    @relation(fields: [subjectId], references: [id])
  
  @@map("questions")
}

// Program Test Assignments
model ProgramTest {
  id            String   @id @default(cuid())
  programId     String
  screeningId   String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  program       Program   @relation(fields: [programId], references: [id])
  screening     Screening @relation(fields: [screeningId], references: [id])
  
  @@unique([programId, screeningId])
  @@map("program_tests")
}

// Test Results
model TestScore {
  id             String   @id @default(cuid())
  candidateId    String
  questionId     String?
  selectedAnswer String?
  isCorrect      Boolean?
  marks          Float    @default(0)
  timeTaken      Int?     // in seconds
  scoredById     String?
  createdAt      DateTime @default(now())
  
  candidate      Candidate @relation(fields: [candidateId], references: [id])
  scoredBy       User?     @relation("ScoredBy", fields: [scoredById], references: [id])
  
  @@map("test_scores")
}

// System Configuration
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  
  @@map("system_config")
}

// Audit Logging
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // "LOGIN", "CREATE_CANDIDATE", "UPDATE_SCORE", etc.
  entity      String   // "User", "Candidate", "Screening", etc.
  entityId    String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

// Enums
enum Role {
  SUPER_ADMIN
  ADMIN
  STAFF
  EXAMINER
  CANDIDATE
}

enum Level {
  ND    // National Diploma
  HND   // Higher National Diploma
}

enum ScreeningStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
}

enum CandidateStatus {
  REGISTERED
  WRITTEN
  PASSED
  FAILED
  ADMITTED
  REJECTED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}