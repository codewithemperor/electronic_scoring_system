// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management Models
enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF
  CANDIDATE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String?  @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          UserRole
  status        UserStatus @default(PENDING)
  emailVerified Boolean  @default(false)
  lastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  superAdminProfile  SuperAdmin?
  adminProfile      Admin?
  staffProfile      Staff?
  candidateProfile  Candidate?
  auditLogs         AuditLog[]
  sessions          Session[]

  @@map("users")
}

model SuperAdmin {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admins")
}

model Admin {
  id           String @id @default(cuid())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("admins")
}

model Staff {
  id           String @id @default(cuid())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  employeeId   String @unique
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("staff")
}

model Candidate {
  id              String @id @default(cuid())
  userId          String @unique
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jambNumber      String @unique
  utmeScore       Int?
  postUtmeScore   Int?
  oLevelResults   Json?
  birthDate       DateTime?
  gender          String?
  stateOfOrigin   String?
  lga             String?
  address         String?
  passportPhoto   String?
  screeningStatus ScreeningStatus @default(NOT_STARTED)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  applications    Application[]
  screeningRecords ScreeningRecord[]
  examResults     ExamResult[]

  @@map("candidates")
}

// Academic Structure Models
model Department {
  id          String @id @default(cuid())
  name        String @unique
  code        String @unique
  description String?
  faculty     String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  programs    Program[]
  admins      Admin[]
  staff       Staff[]
  criteria    ScreeningCriteria[]
  exams       Exam[]

  @@map("departments")
}

model Program {
  id           String @id @default(cuid())
  name         String
  code         String @unique
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  duration     Int // in years
  capacity     Int?
  description  String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  applications Application[]
  criteria     ScreeningCriteria[]

  @@map("programs")
}

// Screening System Models
enum ScreeningStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
  PASSED
  PENDING_REVIEW
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  WAITLISTED
}

model Application {
  id           String @id @default(cuid())
  candidateId  String
  candidate    Candidate @relation(fields: [candidateId], references: [id])
  programId    String
  program      Program @relation(fields: [programId], references: [id])
  status       ApplicationStatus @default(PENDING)
  totalScore   Int?
  remarks      String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([candidateId, programId])
  @@map("applications")
}

model ScreeningCriteria {
  id           String @id @default(cuid())
  name         String
  description  String?
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  programId    String?
  program      Program? @relation(fields: [programId], references: [id])
  weight       Int @default(1)
  minValue     Int?
  maxValue     Int?
  isActive     Boolean @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  screeningRecords ScreeningRecord[]

  @@map("screening_criteria")
}

model ScreeningRecord {
  id          String @id @default(cuid())
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  criteriaId  String
  criteria    ScreeningCriteria @relation(fields: [criteriaId], references: [id])
  score       Int
  remarks     String?
  scoredBy    String // Staff ID
  scoredAt    DateTime @default(now())
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([candidateId, criteriaId])
  @@map("screening_records")
}

// Examination System Models
model Exam {
  id           String @id @default(cuid())
  title        String
  description  String?
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  duration     Int // in minutes
  totalMarks   Int
  passingMarks Int
  isActive     Boolean @default(true)
  scheduledAt  DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  questions    Question[]
  results      ExamResult[]

  @@map("exams")
}

model Question {
  id          String @id @default(cuid())
  examId      String
  exam        Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
  question    String
  options     Json // Array of options
  correctAnswer Int
  marks       Int @default(1)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("questions")
}

model ExamResult {
  id          String @id @default(cuid())
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  examId      String
  exam        Exam @relation(fields: [examId], references: [id])
  answers     Json // Array of selected answers
  score       Int
  percentage  Float
  status      String // PASSED, FAILED, PENDING
  timeTaken   Int? // in seconds
  startedAt   DateTime?
  completedAt DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([candidateId, examId])
  @@map("exam_results")
}

// Security and Logging Models
model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  action      String
  entityType  String?
  entityId    String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())

  @@map("audit_logs")
}

// System Configuration Models
model SystemConfig {
  id          String @id @default(cuid())
  key         String @unique
  value       Json
  description String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}